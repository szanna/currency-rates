name: Deploy Release

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      ver_tag:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'version tag'
        # Input has to be provided for the workflow to run
        required: true      
env:
  IMAGE_FRONT_NAME: nbp-front:${{ github.event.inputs.ver_tag }}
  IMAGE_BACK_NAME: nbp-back:${{ github.event.inputs.ver_tag }}
  
jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    runs-on: ubuntu-latest

    steps:     
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
          Host nbpvps
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/staging.key
            StrictHostKeyChecking no
          END
        env:
            SSH_USER: ${{ secrets.SSH_USER }}
            SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
            SSH_HOST: ${{ secrets.SSH_HOST }}
          
      - uses: actions/checkout@v2
        with:
          ref: refs/tags/${{ github.event.inputs.ver_tag }}
        
      - name: Build front image
        run: docker build . --tag $IMAGE_FRONT_NAME --no-cache=true
        working-directory: ./frontend
        
      - name: Build backend image
        run: docker build . --tag $IMAGE_BACK_NAME --no-cache=true
        working-directory: ./backend

    # SAVE
      - name: Save docker image $IMAGE_FRONT_NAME
        run: |
          docker save -o ./$IMAGE_FRONT_NAME.tar $IMAGE_FRONT_NAME
          
      - name: Save docker image $IMAGE_BACK_NAME
        run: |
          docker save -o ./$IMAGE_BACK_NAME.tar $IMAGE_BACK_NAME    
          
    # TRANSFER
#       - name: Transfer $IMAGE_FRONT_PRESENT
#         run: |
#           scp ./$IMAGE_FRONT_NAME.tar ubuntu@nbpvps:/tmp
       
#       - name: Transfer $IMAGE_BACK_NAME
#         run: |
#           scp ./$IMAGE_BACK_NAME.tar ubuntu@nbpvps:/tmp
                 
#     # UNPACK             
#       - name: Unpack images on remote host
#         run: |
#           ssh ubuntu@nbpvps "docker load -i /tmp/$IMAGE_FRONT_NAME.tar"
#           ssh ubuntu@nbpvps "rm /tmp/$IMAGE_FRONT_NAME.tar"
          
#       - name: Unpack images on remote host
#         run: |
#           ssh ubuntu@nbpvps "docker load -i /tmp/$IMAGE_BACK_NAME.tar"
#           ssh ubuntu@nbpvps "rm /tmp/$IMAGE_BACK_NAME.tar"
            
#       - name: Run application
#         working-directory: ./
#         run: |
#            DOCKER_HOST="ssh://ubuntu@nbpvps" docker-compose stop   
#            DOCKER_HOST="ssh://ubuntu@nbpvps" VER=${{ github.event.inputs.ver_tag }} docker-compose up -d --no-build
           
# Transfering images to Registry is not used now because limits are per account, not per repository
      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.CR_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_FRONT_NAME
          docker tag $IMAGE_FRONT_NAME $IMAGE_ID
          docker push $IMAGE_ID
          
      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_BACK_NAME
          docker tag $IMAGE_BACK_NAME $IMAGE_ID
          docker push $IMAGE_ID
